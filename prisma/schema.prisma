// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                Int            @id @default(autoincrement())
  name              String         @unique
  phone             String?        @db.VarChar(11)
  // gender            Int
  // avatar            String?
  // birthdate         String?
  // password          String        @db.VarChar(20)
  email             String?        @unique
  introduction      String?
  // virtualAccount    Int?            
  // virtualAccountId  Int?

  tokens            Token[]
  // chats             Chat[]
  // rooms             Room[]
  // messages          Message[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt()
  // services          Service[]
  // licenseCerts      LicenseCert[]
  // reviews           Review[]  
  // inquiries             Inquiry[]   
  // answers            Answer[]  
  //@@map("users")
}


model Token {
  id        Int       @id @default(autoincrement())
  payload   String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}



// model Service {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//  // user      User      @relation(fields: [userId], references: [id])
//   // userId    Int
//   title     String
//   content   String    @db.MediumText
//   // room      Room[]
//   serviceDate String
//   startTime String
//   endTime   String
//   Cost      Int
//   Method    String

// //  @@index([userId])
// }

// model Inquiry {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//  // user      User      @relation(fields: [userId], references: [id])
//   // userId    Int
//   question  String    @db.MediumText
// //  @@index([userId])
//   answer    Answer[]
// }

// model Answer {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   answer    String    @db.MediumText
//    // user      User      @relation(fields: [userId], references: [id])
//   // userId    Int
//   inquiry      Inquiry      @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
//   inquiryId    Int 
// }

// model LicenseCert {
//   id                Int      @id @default(autoincrement())
//   licenseNum        String
//   licenseIssueDate  DateTime
//   licenseSerialNum  String
//   user              User    @relation(fields: [userId], references: [id])
//   userId            Int      

//   @@map("license_cert")
// }

// model ServiceMatching {
//   serviceId        Int      @id
//   requesterId      Int      @db.Int
//   createdAt        DateTime
//   serviceTitle     String   @db.VarChar(30)
//   serviceContent   String   @db.VarChar(30)
//   providerId       Int      @db.Int
//   startTime        DateTime
//   endTime          DateTime
//   serviceCost      Int
//   serviceStatus    Int
//   serviceMethod    Int
//   acceptanceStatus Boolean
//   transactions  TransactionHistory[] 

//   @@map("service_matching")
// }

// model Review {
//   id        Int      @id @default(autoincrement())
//   text      String   @db.MediumText
//   rating    Int      @default(3)
//   from      User     @relation(name: "WrittenReviews", fields: [fromId], references: [id])
//   fromId    Int
//   to        User     @relation(name: "ReceivedReviews", fields: [toId], references: [id])
//   toId      Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt()

//   @@index([fromId])
//   @@index([toId])
// }

// model Chat {
//   id           Int           @id @default(autoincrement())
//   users        User[]
//   chatMessages ChatMessage[]
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime      @updatedAt()
// }

// model ChatMessage {
//   id        Int      @id @default(autoincrement())
//   text      String
//   user      User     @relation(fields: [userId], references: [id])
//   userId    Int
//   chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
//   chatId    Int?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt()

//   @@index([userId])
//   @@index([chatId])
// }


// model TransactionHistory {
//   paymentId     Int      @id @default(autoincrement())
//   serviceId     Int      @db.Int
//   amount        Int
//   depositTime   DateTime
//   service       ServiceMatching @relation(fields: [serviceId], references: [serviceId])

//   @@map("transaction_history")
//   @@index([serviceId])
// }

// model CertificationVerification {
//   certificationId   Int      @id
//   certificationNumber String  @db.VarChar(20)
//   issuanceDate     DateTime
//   certificatePageNumber String @db.VarChar(20)
//   userId           Int      @db.Int

//   @@map("certification_verification")
// }

// model BlockList {
//   blockId           Int      @id
//   blockedUserId     Int
//   userId            Int      @db.Int

//   @@map("block_list")
// }

// model Notification {
//   notificationId     Int      @id
//   notificationContent String   @db.Text
//   userId             Int      @db.Int
//   isRead             Boolean

//   @@map("notification")
// }



